GNU have rewritten the Sun java mail API, which means we now have GPL'd libraries we can use.
see: http://www.gnu.org/software/classpathx/javamail/

First we need to download all the source:
<code>
wget http://ftp.gnu.org/gnu/classpathx/activation-1.1.1.tar.gz
wget http://ftp.gnu.org/gnu/classpath/inetlib-1.1.1.tar.gz
wget http://ftp.gnu.org/gnu/classpathx/mail-1.1.2.tar.gz
</code>
<b>NOTE:</b> The above links are on the javamail link above, so you can just download it from there!

Extract and start building.. 

<code>
tar -xvf activation-1.1.1.tar.gz
tar -xvf inetlib-1.1.1.tar.gz 
tar -xvf mail-1.1.2.tar.gz 
</code>

Because we build our 3rd party libs from source, we need to go about building this a little different.
We have to edit the mail build file so it looks for the activation and inetlib jars in its local directory,
Change:
    <available file='${activation.jar}' property='/usr/share/java/activation.available'/>
    <available file='${inetlib.jar}' property='/usr/share/java/inetlib.available'/>
To:
    <available file='${activation.jar}' property='activation.available'/>
    <available file='${inetlib.jar}' property='inetlib.available'/>

You can have a look at ext/src/build.xml for the actual code, but this is what we do:

  1. Build activation library by using its 'dist' target, then copy the resulting jar files to the extracted mail source.
  2. Move all the activation compiled class files to the plugins bin directory (ext/bin).
  3. Build inetlib library by using its 'dist' target, then copy the resulting jar files to the extracted mail source.
  4. Move all the inetlib compiled class files to the plugins bin directory (ext/bin).
  5. Build the mail library classes by using its 'dist' (default) target.
  6. Move all the mail compiled classes to the bin directory (ext/bin)
NOTE: We don't usually compile a library into jar files, as we usually add the classes to our jar file, so that it can be stand alone. 
      BUT, the mail build script needs the activation and inetlib jars to compile.

